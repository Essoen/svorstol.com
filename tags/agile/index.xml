<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>agile on Stein-Otto Svorstøl</title><link>https://www.svorstol.com/tags/agile/</link><description>Recent content in agile on Stein-Otto Svorstøl</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Mon, 21 Feb 2022 06:00:00 +0000</lastBuildDate><atom:link href="https://www.svorstol.com/tags/agile/index.xml" rel="self" type="application/rss+xml"/><item><title>Roadmaps in an agile team</title><link>https://www.svorstol.com/blog/2022/using-a-roadmap-in-an-agile-team/</link><pubDate>Mon, 21 Feb 2022 06:00:00 +0000</pubDate><guid>https://www.svorstol.com/blog/2022/using-a-roadmap-in-an-agile-team/</guid><description>A colleague and I recently discussed the role of roadmaps in an agile context. He pointed to some books and sources, saying roadmaps are useless or unimportant. This also plays into the #NoEstimates movement.
Specifically, my colleague pointed to the book &amp;ldquo;Inspired&amp;rdquo; by Marty Cagan. I hadn&amp;rsquo;t read the book myself, but I went through the chapters on roadmaps. Here&amp;rsquo;s a relevant quote:
The issue is that anytime you put a list of ideas on a document entitled “roadmap,” no matter how many disclaimers you put on it, people across the company will interpret the items as a commitment.</description></item><item><title>Solving complex problems as fast as possible</title><link>https://www.svorstol.com/blog/2021/02-27-solving-complex-problems/</link><pubDate>Sat, 27 Feb 2021 21:43:16 +0100</pubDate><guid>https://www.svorstol.com/blog/2021/02-27-solving-complex-problems/</guid><description>As agile methods for software development has been quite widely adopted, the fact that hitting the specification on software is hard, also has been generally accepted. It has been hard, but it is now quite widely accepted that smaller iterations and getting user feedback fast, is crucial to building software that covers actual needs. This means better software, and better products. This trend means that we are starting to recognize that both product and software development are in of itself are complex problems 1, where the solution will be emerging over time.</description></item></channel></rss>